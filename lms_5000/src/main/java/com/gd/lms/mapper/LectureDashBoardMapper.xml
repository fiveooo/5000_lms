<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.lms.mapper.LectureDashBoardMapper">


	<!-- ///////////////////////////////// 기타 게시판 생성 ////////////////////////////////////// -->
	<insert id="insertSubBoard" parameterType="com.gd.lms.vo.Board">
		INSERT
			INTO board (
			board_name
			, board_type
			, create_date
			, lecture_no
		) VALUES (
			#{boardName}
			, 3
			, now()
			, #{lectureNo}
		)
	</insert>
	<!-- ///////////////////////////////// 과제제출관련////////////////////////////////////// -->
	<!-- 강좌 게시판  -->
	<insert id="insertBoard" parameterType="com.gd.lms.vo.Board">
		INSERT
			INTO board (
			board_name
			, board_type
			, create_date
			, lecture_no
		) VALUES (
			#{boardName}
			, 4
			, now()
			, #{lectureNo}
		)
	<!-- 각 강좌별 개시판 생성 쿼리 -->
	</insert>
	<select id="assignmentBoardList" parameterType="com.gd.lms.vo.Board" resultType="map">
		SELECT
			l.lecture_no,
			b.board_no,
			b.board_name,
			b.board_type
		FROM lecture l INNER JOIN board b ON l.lecture_no = b.lecture_no
		WHERE l.lecture_no= #{lectureNo} and b.board_type=4
	</select>
	
	<!-- 과제 제출 상세 게시판 -->
	 <insert id="insertBoardPost" parameterType="com.gd.lms.vo.BoardPost">
	 	INSERT INTO 
	 		 board_post,
		     board_no,
		     board_post_title,
		     board_post_writer,
		     board_post_createdate,
		     board_post_updatedate,
		     count
		VALUES
		     #{boardNo},
		     #{boardPostTitle},
		     #{boardPostWriter},
			 #{boardPostContent},
		     NOW(),
		     NOW(),
		     0
	 </insert>
	 
	 <!-- 학생 출석현황 리스트 출력. -->
	 <select id="sutAttendance" resultType="com.gd.lms.vo.Attendance">
		SELECT
				w.week , a.attend_state attendState
		FROM week w
		INNER JOIN lecture l  ON l.lecture_no = w.lecture_no
		INNER JOIN attendance a ON a.week = w.week
		INNER JOIN sign s ON a.sign_no = s.sign_no
		WHERE l.lecture_no = #{lectureNo} AND s.user_id = #{userId}
	 </select>
	 
	 <!-- 교수가 보는 출결현황 리스트 -->
	 <select id="weekList" parameterType="int" resultType="map">
	 	SELECT
			lecture_no lectureNo,
			w.week week,
			if(dATE(NOW()) BETWEEN w.start_date AND w.end_date,'Y','N') nowWeek,
			if( TIMESTAMPDIFF(DAY,w.start_date ,DATE(NOW()) ) > 0 ,'Y','N' ) access
		FROM week w
		WHERE lecture_no = #{lectureNo}
	 </select>
	 
	 <!-- 교수의 해당강좌 학생리스트 -->
	 <select id="selectStudentListForAtt" parameterType="map" resultType="map">
	 	SELECT 
	 		stu.user_id studentId,
	 		stu.st_name studentName,
	 		l.lecture_no lectureNo
	 		,a.attend_state attendState
		FROM
			lecture l INNER JOIN sign s
			ON l.lecture_no = s.lecture_no
				INNER JOIN student stu
				ON s.user_id = stu.user_id
				 	INNER JOIN professor p
				 	ON l.user_id = p.user_id
				 		LEFT JOIN attendance a
				 		ON s.sign_no = a.sign_no
		WHERE
			l.lecture_no = #{lectureNo} AND p.user_id = #{userId}
			And a.week = #{week}
	 </select>
	 
	 <!-- 해당 주차의 해당강좌의 해당 학생이 출석데이터가 있는지 조회 -->
	 <select id="selectStudentAttData" parameterType="com.gd.lms.vo.AttendanceForm" resultType="Integer">
	 	SELECT
	 		a.week week
		FROM
			attendance a INNER JOIN sign s
			ON a.sign_no = s.sign_no
		WHERE a.week = #{week} AND s.user_id = #{studentId2} AND s.lecture_no = #{lectureNo}
	 </select>
	 
	 <!-- 출석하는데 출석 정보가 없을시 -->
	 <insert id="insertStudentAttendance" parameterType="com.gd.lms.vo.AttendanceForm">
		 INSERT INTO
			attendance (
				week,
				sign_no,
				attend_state,
				create_date,
				update_date
			) VALUES (
				#{week},
				(SELECT sign_no FROM sign WHERE user_id = #{studentOne} AND lecture_no = #{lectureNo}),
				#{attStateOne},
				NOW(),
				NOW()
			)
	 </insert>
	 
	 <!-- 출석하는데 출석 정보가 이미 있다면 -->
	 <update id="updateStudentAttendance" parameterType="com.gd.lms.vo.AttendanceForm">
		UPDATE
		 	attendance
		SET 
			attend_state = #{attStateOne} , update_date = NOW()
		WHERE
			week = #{week}
			AND
			sign_no =(SELECT sign_no
						FROM sign
						WHERE user_id = #{studentOne} AND lecture_no = #{lectureNo})
	
	 </update>
	 
	 <!-- 출석페이지의 해당 강좌의 정보들 -->
	 <select id="selectLectureInfo" parameterType="com.gd.lms.vo.AttendanceForm" resultType="map">
	 	SELECT
	 		s.subject_name subjectName,
	 		m.major_name majorName
		FROM
			lecture l INNER JOIN professor p
			ON l.user_id = p.user_id
				INNER JOIN subject s
				ON l.subject_no = s.subject_no
					INNER JOIN major m
					ON s.major_no = m.major_no
		WHERE 
			l.lecture_no = #{lectureNo} AND l.user_id = #{userId}
	 </select>
</mapper>